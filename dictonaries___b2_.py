# -*- coding: utf-8 -*-
"""dictonaries _ B2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kvM-SAdPCXBuVDO5Khl1we5wia0gYZLK

# Dictionary
Dictionary is a variable containing **key : value** pair items enclosed in curly brackets, separated by commas. 

Dictname = {
   'keyname':'valuename',
   'keyname':'valuename',
   'keyname':'valuename',
}

While the values can be of any data type and can repeat, keys must be of immutable type (string, number or tuple with immutable elements) and must be unique.

A dictionary is a collection which is **unordered**, **changeable** and Unindexed. In Python dictionaries are written with **curly brackets**, and they have **keys and value**s.
"""



"""https://docs.python.org/3/tutorial/datastructures.html#dictionaries -

**websites :**

geeksforgeeks - https://www.geeksforgeeks.org/python-programming-language/

w3schools -     https://www.w3schools.com/python/default.asp

progamiz -      https://www.programiz.com/python-programming 

python.org -    https://docs.python.org/3/reference/index.html  - offical website
"""

# Note :-- each key name should be unique keyname (i.e different name for each key name)
x = { "key" : "value1",  # 
      "key" : "value2"  # if same key name has given 2 values....then it takes the last updated value given to the keyname
    
}
print(x)

x = "string"
#    012345
a = [1,2,345]
print(x[3])
y = [1, "start", "fruits", 3.4,a,"hii",x]
#    0    1         2       3  4   5    6
print(y)
print(y[4])

# access values of a particular key in dictonary is
variable["keyname"]
variable.get("keyname")   ---> gives the output as value of specified key

D = {"keyname1":"value1", "keyname2":"value2", "keyname3":"value3" }   
x = { 1 : "lakshmi", 2:"tanisha", 3: "hardik", 4:"soumya", "python": 4  }
print(x[3])

student1 = {"name": "hardik", "age" : 11, "place" : "hyderabad", "gender":"male"}
print(student1["name"])

batch1 = { "student1": {"name": "hardik", "age" : 11, "place" : "hyderabad", "gender":"male"} ,
           "student2": {"name": "soumya", "age" : 12, "place" : "hyderabad", "gender":"female"}, 
           "student3": {"name": "tanisha", "age" : 13, "place" : "hyderabad", "gender":"female"}
}
print(batch1["student1"])
print(batch1["student1"]["name"])



details = []

List = [1,2,"hello", [1,4,5,6], {1:"num1", 2 : "kite"},4,5]
#        0 1  2         3

print(List[3][1])
#

Dictname = {
   'keyname1':'valuename',
   'keyname2':'valuename',
   'keyname3':['valuename', 'valuename2','valuename3', 'valuename4'],
   'keyname': {"name" : "lakshmi", "age": 25, "DOB":"1995"}
}
print(Dictname.get("keyname")[2])

x = {1:"value1",1:"value5", 2:"valeu2", 3 :"value3"}
print(x)

lakshmi = ["lakshmi",25,1995,"hyderabad"]
x = { "username" : "we could pass variable names also",
      "username1" : lakshmi
    
}
print(x)

# Nested Dictionaries
# A dictionary can also contain many dictionaries, this is called nested dictionaries.

#Example:  Create a dictionary that contain three dictionaries:
myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}

#if you want to nest three dictionaries that already exists as dictionaries:

#Create three dictionaries, then create one dictionary that will contain the other three dictionaries: 
child1 = {
  "name" : "Emil",
  "year" : 2004
}
child2 = {
  "name" : "Tobias",
  "year" : 2007
}
child3 = {
  "name" : "Linus",
  "year" : 2011
}

myfamily = {
  "child1" : child1,
  "child2" : child2,
  "child3" : child3
}

print(myfamily)



python has a set of built-in methods that you can use on dictionaries.

Method	               Description

clear()	         Removes all the elements from the dictionary
copy()	         Returns a copy of the dictionary
fromkeys()	     Returns a dictionary with the specified keys and value  # adding items
get()	           Returns the value of the specified key
items()	         Returns a list containing a tuple for each key value pair
keys()	         Returns a list containing the dictionary's keys
pop()	           Removes the element with the specified key
popitem()	       Removes the last inserted key-value pair
setdefault()     Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	       Updates the dictionary with the specified key-value pairs
values()	       Returns a list of all the values in the dictionary

Method	Description
clear()	Removes all items from the dictionary.
copy()	Returns a shallow copy of the dictionary.
fromkeys(seq[, v])	Returns a new dictionary with keys from seq and value equal to v (defaults to None).
get(key[,d])	Returns the value of the key. If the key does not exist, returns d (defaults to None).
items()	Return a new object of the dictionary's items in (key, value) format.
keys()	Returns a new object of the dictionary's keys.
pop(key[,d])	Removes the item with the key and returns its value or d if key is not found. If d is not provided and the key is not found, it raises KeyError.
popitem()	Removes and returns an arbitrary item (key, value). Raises KeyError if the dictionary is empty.
setdefault(key[,d])	Returns the corresponding value if the key is in the dictionary. If not, inserts the key with a value of d and returns d (defaults to None).
update([other])	Updates the dictionary with the key/value pairs from other, overwriting existing keys.
values()	Returns a new object of the dictionary's values

Python Dictionary keys() method
Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.

keys() method in Python Dictionary, returns a view object that displays a list of all the keys in the dictionary.

Syntax: dict.keys()

Parameters: There are no parameters.

Returns: A view object is returned that displays all the keys. This view object changes according to the changes in the dictionary.



# Python program to show working 
# of keys in Dictionary 

# Dictionary with three keys 
Dictionary1 = {'A': 'Geeks', 'B': 'For', 'C': 'Geeks'} 

# Printing keys of dictionary

print(Dictionary1.keys()) 

# Creating empty Dictionary 
empty_Dict1 = {} 

# Printing keys of Empty Dictionary 
print(empty_Dict1.keys())   # Order of these key values in the list may not always be same.

Example #2: To show how updation of dictionary works
# Python program to show updation 
# of keys in Dictionary 

# Dictionary with two keys 
Dictionary1 = {'A': 'Geeks', 'B': 'For'} 

# Printing keys of dictionary 
print("Keys before Dictionary Updation:") 
keys = Dictionary1.keys() 
print(keys) 

# adding an element to the dictionary 
Dictionary1.update({'C':'Geeks'}) 

print('\nAfter dictionary is updated:') 
print(keys)

x = {'A': 'Geeks', 'B': 'For'} + {'N': 'Geeks', 'M': 'For'}   # we can not use + symbol for adding 2 dictonaries together
print(x)

Here, when the dictionary is updated, keys is also automatically updated to show the changes.

Practical Application : The keys() can be used to access the elements of dictionary as we can do for list, without use of keys(), no other mechanism provides means to access dictionary keys as list by index. This is demonstrated in the example below.

Example #3 : Demonstrating practical application of keys()
# Python program to demonstrate 
# working of keys() 

# initializing dictionary 
test_dict = { "geeks" : 7, "for" : 1, "geeks" : 2 } 

# accessing 2nd element using naive method 
# using loop 
j = 0
for i in test_dict: 
	if (j == 1): 
		print ('2nd key using loop : ' + i) 
	j = j + 1

# accessing 2nd element using keys() 
print ('2nd key using keys() : ' + test_dict.keys()[1]) 

# Note: -> the second approach would not work because dict_keys in Python 3 does not support indexing.

Python Dictionary items() method

Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, items() method is used to return the list with all dictionary keys with values.
 

Syntax: dictionary.items()
Parameters: This method takes no parameters.
Returns: A view object that displays a list of a given dictionaryâ€™s (key, value) tuple pair.

Example #1: 
brightness_4
# Python program to show working 
# of items() method in Dictionary 
  
# Dictionary with three items  
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' } 
  
print("Dictionary items:") 
  
# Printing all the items of the Dictionary 
print(Dictionary1.items())

#Order of these items in the list may not always be same.

Example #2: To show working of items() after modification of Dictionary. 

brightness_4
# Python program to show working 
# of items() method in Dictionary 
  
# Dictionary with three items  
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' } 
  
print("Original Dictionary items:") 
  
items = Dictionary1.items() 
  
# Printing all the items of the Dictionary 
print(items) 
  
# Delete an item from dictionary 
del[Dictionary1['C']] 
print('Updated Dictionary:') 
print(items) 


If the Dictionary is updated anytime, the changes are reflected in the view object automatically.

x = { 1 : "lakshmi", 2:"tanisha", 3: "hardik", 4:"soumya", "python": 4  }
print(x)
print(dict(x.items()))
# dict(variable etc) - function is use to keep the data in dictonary format
# here we should note that dict () func works with vaild dictonary data type only

x = { 1 : "lakshmi", 2:"tanisha", 3: "hardik", 4:"soumya", "python": 4  }
#print(x)
print(list(x.values()))
print(list(x.keys()))
print(x.get("python"))  # get() method used for getting value of a specified key
y =x.copy()
print(y)
print(x.fromkeys([1,2,3],"val1"))   # creaytes as a new dict
print(x.pop("python"))
print(x)
print(x.popitem())  # 
print(x)
print(x.setdefault("d", "geeks"))  # setdefault("keyname", "valuename")
print(x.update({"a":"hii", "b" : 987}))  # in the form of dictonary
print(x)
print(x.clear())

str(jslld), int("7"), list()

x = str(7)
print(x)

# Adding elements to a Dictionary
In Python Dictionary, Addition of elements can be done in multiple ways. One value at a time can be added to a Dictionary by defining value along with the key 
e.g. Dict[Key] = â€˜Valueâ€™. Updating an existing value in a Dictionary can be done by using the built-in update() method.
Nested key values can also be added to an existing Dictionary.
# Note- 
While adding a value, if the key value already exists, the value gets updated otherwise a new Key with the value is added to the Dictionary.

# Creating an empty Dictionary 
Dict = {} 
print("Empty Dictionary: ") 
print(Dict) 

# Adding elements one at a time 
Dict[0] = 'Geeks'
Dict[2] = 'For'
Dict[3] = 1
print("\nDictionary after adding 3 elements: ") 
print(Dict) 

# Adding set of values 
# to a single Key 
Dict['Value_set'] = [2, 3, 4]
print("\nDictionary after adding 3 elements: ") 
print(Dict) 
print(type(Dict["Value_set"]))

# Updating existing Key's Value 
Dict[2] = 'Welcome'
print("\nUpdated key value: ") 
print(Dict) 

# Adding Nested Key value to Dictionary 
Dict[5] = {'Nested' :{'1' : 'Life', '2' : 'Geeks'}} 
print("\nAdding a Nested Key: ") 
print(Dict)

d = {}
for i in range(3):
  key = input("enter the key name: ")
  value = input("enter the value for given key")
  d[key] = list(value)
print(d)

Accessing elements from a Dictionary
In order to access the items of a dictionary refer to its key name.Key can be used inside square brackets.

# Python program to demonstrate 
# accessing a element from a Dictionary 

# Creating a Dictionary 
Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 

# accessing a element using key 
print("Accessing a element using key:") 
print(Dict['name']) 

# accessing a element using key 
print("Accessing a element using key:") 
print(Dict[1])

There is also a method called get() that will also help in acessing the element from a dictionary.

The get() method is used to avoid such situations. This method returns the value for the given key, if present in the dictionary. 
If not, then it will return None (if get() is used with only one argument).

Syntax :

Dict.get(key, default=None)

Get() method for dictionaries in Python

In python dictionaries, following is a conventional method to access a value for a key.

brightness_4
dic = {"A":1, "B":2} 
print(dic["A"]) 
print(dic["C"]) 
# The problem that arises here is that the 3rd line of the code returns a key error :

Traceback (most recent call last):
  File ".\dic.py", line 3, in 
    print (dic["C"])
KeyError: 'C'

dic = {"A":1, "B":2} 
print(dic.get("A")) 
print(dic.get("C")) 
print(dic.get("C","Not Found ! "))

x = { "username1" : {"name" : "lakshmi", "age": 25, "birth" : 1995, "place" : "hyderabad"},
      "username2" : {"name" : "neelam", "age": 30, "birth" : 1990, "place" : "hyderabad"},   
}  # we can not acess the dict values with indexing numbers

print(x["username2"]["name"] , x["username2"]["age"])
# In DICTIONARIES we can acess the values of a keyname using get(keyname) method
print(x.get("username2").get("name").upper(), )  # here we are accessing the

print(x.get("username2").get("name").upper())
gives value of ^ &  inside gets ^

Accessing element of a nested dictionary
In order to access the value of any key in nested dictionary, use indexing [] syntax.

# Creating a Dictionary 
Dict = {'Dict1': {1: 'Geeks'}, 
		'Dict2': {'Name': 'For'}} 

# Accessing element using key 
print(Dict['Dict1']) 
print(Dict['Dict1'][1]) 
print(Dict['Dict2']['Name'])

Python Dictionary update() method

Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.

In Python Dictionary, update() method updates the dictionary with the elements from the another dictionary object or from an iterable of key/value pairs.

Syntax: dict.update([other])

Parameters: This method takes either a dictionary or an iterable object of key/value pairs (generally tuples) as parameters.

Returns: It doesnâ€™t return any value but updates the Dictionary with elements from a dictionary object or an iterable object of key/value pairs.

# Python program to show working 
# of update() method in Dictionary 

# Dictionary with three items 
Dictionary1 = { 'A': 'Geeks', 'B': 'For', } 
Dictionary2 = { 'B': 'Geeks' } 

# Dictionary before Updation 
print("Original Dictionary:") 
print(Dictionary1) 

# update the value of key 'B' 
Dictionary1.update(Dictionary2) 
print("Dictionary after updation:") 
print(Dictionary1)

d = {1:"l", 2:"k"}
d.update({6:"h", 9:"j"})  # we need to specify a new dictonary vales to be added into the update()
print(d)

#Example 2: Update with an iterable.
# Python program to show working  of update() method in Dictionary 
 
Dictionary1 = { 'A': 'Geeks'} # Dictionary with single item

print("Original Dictionary:")  # Dictionary before Updation 
print(Dictionary1) 

# update the Dictionary with iterable 
Dictionary1.update(B = 'For', C = 'Geeks') 
print("Dictionary after updation:") 
print(Dictionary1)

d = {}
seat = 1
d.update(s = "name", seat2 = "age")
d.update()
print(d)

Python Dictionary | setdefault() method

Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, setdefault() method returns the value of a key (if the key is in dictionary). If not, it inserts key with a value to the dictionary.

Syntax: dict.setdefault(key, default_value)
Parameters: It takes two parameters: 
key â€“ Key to be searched in the dictionary. 
default_value (optional) â€“ Key with a value default_value is inserted to the dictionary if key is not in the dictionary. If not provided, the default_value will be None.
Returns: 
Value of the key if it is in the dictionary. 
None if key is not in the dictionary and default_value is not specified. 
default_value if key is not in the dictionary and default_value is specified.

# Python program to show working
# of setdefault() method in Dictionary

# Dictionary with single item 
Dictionary1 = { 'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# using setdefault() method
Third_value = Dictionary1.setdefault('C')
print("Dictionary:", Dictionary1)
print("Third_value:", Third_value)

#Example #2: When key is not in the dictionary. 
# Python program to show working
# of setdefault() method in Dictionary

# Dictionary with single item 
Dictionary1 = { 'A': 'Geeks', 'B': 'For', "D":7}

# using setdefault() method
# when key is not in the Dictionary
Third_value = Dictionary1.setdefault('C')
print("Dictionary:", Dictionary1)
print("Third_value:", Third_value)

# using setdefault() method
# when key is not in the Dictionary
# but default value is provided
Fourth_value = Dictionary1.setdefault('D', 'Geeks')
print("Dictionary:", Dictionary1)
print("Fourth_value:", Fourth_value)
print(Fourth_value)



Sometimes there is a need to generate a dictionary from the given keys. Brute implementation of it would take time and would be more tedious job.
Hence, fromkeys() helps us achieve this very task with ease and using just a single method. This article explains working and other aspects associated with this function.

Syntax : fromkeys(seq, val)

Parameters :
seq : The sequence to be transformed into a dictionary.
val : Initial values that need to be assigned to the generated keys. Defaults to None.

Returns : A dictionary with keys mapped to None if no value is provided, else to the value provided in the field.

Code #1 : Demonstrating the working of fromkeys()

# Python 3 code to demonstrate 
# working of fromkeys() 

# initializing sequence 
seq = { 'a', 'b', 'c', 'd', 'e' } 

# using fromkeys() to convert sequence to dict 
# initializing with None 
res_dict = dict.fromkeys(seq) 

# Printing created dict 
print ("The newly created dict with None values : " + str(res_dict)) 


# using fromkeys() to convert sequence to dict 
# initializing with 1 
res_dict2 = dict.fromkeys(seq, 1) 

# Printing created dict 
print ("The newly created dict with 1 as value : " + str(res_dict2))

Behaviour of fromdict() with Mutable objects as values:

fromdict() can also be supplied with mulatable object as default value. But in this case, a deep copy is made of dictionary, i.e if we append value in original list, the append takes place in all the values of keys.

Prevention : Certain dictionary comprehension techniques can be used to create a new list as key values, that does not point to original list as values of keys.

Code #2 : Demonstrating the behaviour with mutable objects.

# Python 3 code to demonstrate 
# behaviour with mutable objects 

# initializing sequence and list 
seq = { 'a', 'b', 'c', 'd', 'e' } 
lis1 = [ 2, 3 ] 

# using fromkeys() to convert sequence to dict 
# using conventional method 
res_dict = dict.fromkeys(seq, lis1) 

# Printing created dict 
print ("The newly created dict with list values : "
									+ str(res_dict)) 

# appending to lis1 
lis1.append(4) 

# Printing dict after appending 
# Notice that append takes place in all values 
print ("The dict with list values after appending : "
									+ str(res_dict)) 

lis1 = [ 2, 3 ] 
print ('\n') 

# using fromkeys() to convert sequence to dict 
# using dict. comprehension 
res_dict2 = { key : list(lis1) for key in seq } 

# Printing created dict 
print ("The newly created dict with list values : "
								+ str(res_dict2)) 

# appending to lis1 
lis1.append(4) 

# Printing dict after appending 
# Notice that append doesnt take place now. 
print ("The dict with list values after appending (no change) : "
											+ str(res_dict2))





"""### Removing Elements from Dictionary
#### Using del keyword
In Python Dictionary, deletion of keys can be done by using the del keyword. Using del keyword, specific values from a dictionary as well as whole dictionary can be deleted. Items in a Nested dictionary can also be deleted by using del keyword and providing specific nested key and particular key to be deleted from that nested Dictionary.

**Note-** del Dict will delete the entire dictionary and hence printing it after deletion will raise an Error.
"""

# Initial Dictionary 
Dict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', 
		'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, 
		'B' : {1 : 'Geeks', 2 : 'Life'}} 
print("Initial Dictionary: ") 
print(Dict) 

# Deleting a Key value 
del (Dict[6]) 
print("\nDeleting a specific key: ") 
print(Dict) 

# Deleting a Key from 
# Nested Dictionary 
del (Dict['A'][2]) 
print("\nDeleting a key from Nested Dictionary: ") 
print(Dict)

x = "string"
print(x)
del (x)
print(x)

Using pop() method
Pop() method is used to return and delete the value of the key specified.

# Creating a Dictionary 
Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 

# Deleting a key 
# using pop() method 
pop_ele = Dict.pop(1) 
print('\nDictionary after deletion: ' + str(Dict)) 
print('Value associated to poped key is: ' + str(pop_ele))

Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 

# Deleting a key 
# using pop() method 
print(Dict.pop(3)) 
print(Dict)

Using popitem() method  # used to delete last item in the dictonary
The popitem() returns and removes an arbitrary element (key, value) pair from the dictionary.

# Creating Dictionary 
Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 

# Deleting an arbitrary key 
# using popitem() function 
pop_ele = Dict.popitem()
Dict = Dict
pop_ele = Dict.popitem()
print("\nDictionary after deletion: " + str(Dict)) 
print("The arbitrary pair returned is: " + str(pop_ele))

Using clear() method
All the items from a dictionary can be deleted at once by using clear() method.

# Creating a Dictionary 
Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 


# Deleting entire Dictionary 
Dict.clear() 
print("\nDeleting Entire Dictionary: ") 
print(Dict)

help(dict)

x = { "student" : "lakshmi" , "student1" : "saisree", "student2":"sreeram", "student3": "samhitha"}
#print(x("student")) # here we can not call a dictnary in print function directly
print(x.values())

person = { "name" : "lakshmi" ,
          "Gender": "female" ,
          "age" : "24", 
          "location" : "hyd"}    # dictonary is a UNORDERED data-tpye bcz we are not accessing the items of the dic by index nubers.....we access items by keys / values.

print (person)
print(person)

# example ---> In BANK we need to store details of coustermers/ employees....so each person details will be stored in 1 single dictonary.

data = { 1: "lakshmi"
         2:"manasvi"
         3: "shreyank"}



name = ["lakshmi", "manasvi", "shreyank"]
age = [24, 10, 12]
gender = ["female", "female", "male"]
area = ["hyd", "hyd", "hyd"]
num = 4899
string = "word or sentence or character"

person = { "name" : ["lakshmi", "manasvi", "shreyank"] , # its list value for the "name" key
           "empty_list" : [], 
          "Gender": "female" ,     # its a string value for the gender key
          "age" : "24", 
          "location" : "hyd"} 

print (person)

emptydic = {}
print(emptydic)

classnames = {
    'names':'Lakshmi', 
    'city': 'Hyderabad'
}
print(classnames)
print(classnames.keys())
print(classnames.values())
print(classnames['names'])
print(classnames['city'])

for x in thisdict:
  print(x)  #Print all key names in the dictionary, one by one ---> x = keys

for x in thisdict:    
  print(thisdict[x])  # Print all values in the dictionary, one by one ---> [x] = represent values of dic



for x in thisdict.values():   #You can also use the values() method to return values of a dictionary:
  print(x)

Loop through both keys and values, by using the items() method:

for x, y in thisdict.items():
  print(x, y)

It is also possible to use the dict() constructor to make a new dictionary:

thisdict = dict(brand="Ford", model="Mustang", year=1964)   # note that keywords are not string literals
# note the use of equals rather than colon for the assignment
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["year"] = 2018
print(thisdict)

#Create a dictionary containing planets and constellations. 
#create an empty dictionary. 
#Populate the dictionary - Input from the user
HB = {
    'states':[],
    'capitals':[]
}

#for loop
for i in range(2):
  states = input('Enter name of states: ')
  capitals = input('Enter name of capitals: ')
  HB['states'].append(states)
  HB['capitals'].append(capitals)
print(HB)

# Dictionary Methods
marks = {}.fromkeys(['Math', 'English', 'Science'],[0])  # {} means empty dic, them adds key:value pairs by using fromkeys() method

# Output: {'English': 0, 'Math': 0, 'Science': 0}
print(marks)

#for item in marks.items():
    #print(item)

# Output: ['English', 'Math', 'Science']
#print(list(sorted(marks.keys())))

d["key"] = "newvalue"

x ={}
for i in range(3):
  l= []
  l.append((input("enter the subject name: ")))
  value_marks = int(input("enter the marks:"))
  x = x.fromkeys(l,value_marks)
  
print(x)

x ={}
#i = i +1 

x = x.fromkeys([1,2,3], [89])
x= x.fromkeys([1],89)

#x.fromkeys(["hi9",'kl'],29)
  #x.fromkeys(key_subjects,value_marks)
print(x)

#The clear() method empties the dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)

The dict() Constructor
It is also possible to use the dict() constructor to make a new dictionary:

Example
thisdict = dict(brand="Ford", model="Mustang", year=1964)
# note that keywords are not string literals
# note the use of equals rather than colon for the assignment
print(thisdict)

data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank"}
data.fromkeys(1)

python has a set of built-in methods that you can use on dictionaries.

Method	               Description

clear()	         Removes all the elements from the dictionary
copy()	         Returns a copy of the dictionary
fromkeys()	     Returns a dictionary with the specified keys and value
get()	           Returns the value of the specified key
items()	         Returns a list containing a tuple for each key value pair
keys()	         Returns a list containing the dictionary's keys
pop()	           Removes the element with the specified key
popitem()	       Removes the last inserted key-value pair
setdefault()     Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	       Updates the dictionary with the specified key-value pairs
values()	       Returns a list of all the values in the dictionary

data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank"}

data.update({4:"python"})
#print(data.get(1))  # Returns the value of the specified key


print(data[2])      # Returns the value of the specified key
data[3]
print(data)

d = {}
x = {'apple': 'fruits', 'banana': 'fruits', 'kiwi': 'fruits'}
x = ["apple", "orange", "kiwi"]
d.update(friuts = x)
d.update(key1 = "value1", key2 = "value2", n = "valu3")  # note - the key name should looks like a word, then only this statement runs/works 
#(i.e we can not give key names in "" or numbers)
#or we can write like the below
d.update({1:"value1", 2 : "value2"})
print(d)

x = { "fruits" : ["apple", "banana", "kiwi"] ,  "veggies" : ["carrot", "peas", "tomato"],
      "cars" : ["BMW", "Ford", "benz"]}
print(len(x))

x.fromkeys(["apple", "banana", "kiwi"], "fruits")

y = ["apple", "banana", "kiwi", "orange"] 
z = dict(y)



"""https://www.w3schools.com/python/python_ref_dictionary.asp """

x = { 1 : "apple" , 2 : "orange", 3 : "papaya", "veggies" : "carrot" }   
z = x.copy()
print(z)

print(x.fromkeys("apple"))   # Returns a new dict with keys from iterable and values equal to value.
x.fromkeys("apple", 1)   # x.fromkeys(type, iterable, value)

x = { 1 : "apple " , 2 : "orange", 3 : "papaya", "veggies" : "carrot" }
#x.clear()    # gives us empty dict
print(x)

x = { 1 : "apple" , 2 : "orange", 3 : "papaya", "veggies" : "carrot" }   
print(x.get("veggies")) # need to give "keynames as the parameter"------> donot give valuename as parameter

print(x.items())    # a set-like object providing a view on variable's items

print(x.keys())  # a set-like object providing a view on D's keys

print(x.values())   # D.values() -> an object providing a view on D's values

print(x.pop(3)) # D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
               #  If key is not found, d is returned if given, otherwise KeyError is raised
print(x)

print(x.popitem()) # D.popitem() -> (k, v), remove and return some (key, value) pair as a
                    # 2-tuple; but raise KeyError if D is empty.        ------> it just takes out the last item from the dictonary

print(x)

print(x.setdefault(1))  # D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
print(x)

x = { 1 : "apple" , 2 : "orange", 3 : "papaya", "veggies" : "carrot" }

print(x.update({"color" : "red", 5 : "five"}))  # D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
#If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
#If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
#In either case, this is followed by: for k in F:  D[k] = F[k]

print(x)

bank = {"Username1" : "Sreeram12" , "Username2" : "Samhitha12" , "Username3" : "Lakshmi12" , "Username4" : "SaiSree12",
        "Sreeram12" : "123456" , "Samhitha12" : "234576" , "Lakshmhi12" : "345678" , "SaiSree12" : "456789",
        "123456" : "123" , "234567" : "234" , "345678" : "345" , "456789" : "456",
        "Sreeram12a" : [300000] , "Samhitha12a" : [234000] , "Lakshmhi12a" : [342561], "SaiSree12a" : [452362]
       }
d = input("Kindly enter your username: ")
m = int(input("Please enter the number : "))
if m == 1:
  x = d + "a"
  a = bank.get(x)
  #balance = bank.values(d+"a")
  p = input("Kindly enter your pin number: ")
  if p in bank.values():
    b = int(input("Enter how much you want to deposit : "))
    f = a + b
    update = bank.update({})
    print("Your current amount is ",f)
    g = input("Do you want to perform any other operation : ")
    if g == "Yes" or "yes":
      pass
    else:
      print("Thank you for using our bank.")
    break

print(x.update({"color" : , 5 : "five"}))

bank = {"Username1" : "Sreeram12" , "Username2" : "Samhitha12" , "Username3" : "Lakshmi12" , "Username4" : "SaiSree12",
        "Sreeram12" : "123456" , "Samhitha12" : "234576" , "Lakshmhi12" : "345678" , "SaiSree12" : "456789",
        "123456" : "123" , "234567" : "234" , "345678" : "345" , "456789" : "456",
        "Sreeram12a" : [300000] , "Samhitha12a" : [234000] , "Lakshmhi12a" : [342561], "SaiSree12a" : [452362]
       }
d = input("Kindly enter your username: ")
x = d + "a"
a = bank.get(x)
print(x)

b = int(input("Enter how much you want to deposit : "))
f = a[0] + b
print(f)
a[0] = f
print(bank)

x = { 1 : "apple" , 2 : "orange", 3 : "papaya", "veggies" : "carrot" } 
z = int(input("enter the key name: ") ) 
print(x.get(z)) # need to give "keynames as the parameter"------> donot give valuename as parameter

help(random)

import random
x = ["a", "b", "c", 1,4,5,67,78]
#x = { 1 : "apple" , 2 : "orange", 3 : "papaya", "veggies" : "carrot" }
i = random.randint(0,6)
print(i)
print(x[i])

import random
x = ["a", "b", "c", 1,4,5,67,78]
#x = { 1 : "apple" , 2 : "orange", 3 : "papaya", "veggies" : "carrot" }
print(random.choice(x))







print(x.popitem()) # D.popitem() -> (k, v), remove and return some (key, value) pair as a
                    # 2-tuple; but raise KeyError if D is empty.        ------> it just takes out the last item from the dictonary

print(x)

name =[]
sal = []
x = {"name": name , "salary": sal}
print(x)
for i in range(3):
  x = input("enter ur name: ")
  name.append(x)
  y = input("enter ur salary: ")
  salary.append(y)
  #salary = salary - 12





Definition and Usage
The update() method inserts the specified items to the dictionary.    ---->Insert an item to the dictionary: 

The specified items can be a dictionary, or an iterable object with key value pairs.

Syntax
dictionary.update(iterable)
Parameter Values
Parameter	Description
iterable	A dictionary or an iterable object with key value pairs, that will be inserted to the dictionary



data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank"}

print(data.keys())    # Returns a list containing the dictionary's keys
print(data.values())  # Returns a list of all the values in the dictionary
print(data.items())   # Returns a list of all the  "Key:value" pairs 
print(data.clear())
print(data)

details = {
    "name:lakshmi",
    "age":24,
    ""

}

data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank"}
second_dic = {"maths:algebra", "sceince :atom "}
second_dic = data.copy()     

second_dic

data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank"}

data.update({ 4 : "python", 5:"computers"})  # adds items to the dictionary
print(data)

data # it won't produce the o/p bcz it is in between the code

data.pop(4)  # to delete the item using key names
print(data)

data.popitem() # to delete last item of the dictonary
data

data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank"}
data.fromkeys([2], "name")  # Returns a dictionary with the specified keys and value
print(data.fromkeys([2], "name"))
#data.fromkeys(data, 0)
print(data)

"""The **fromkeys()** method returns a dictionary with the specified keys and the specified value.


Syntax
```
dict.fromkeys(keys, value)
```

```
Parameter                          	Description
keys	                    Required. An iterable specifying the keys of the new dictionary
value(Optional)             The value for all keys. Default value is "None"
```




"""

#Example --> Create a dictionary with 3 keys, all with the value 0:

x = ('key1', 'key2', 'key3')
y = 0

thisdict = dict.fromkeys(x, y)

print(thisdict)

#Example ---> Same example as above, but without specifying the value:

x = ('key1', 'key2', 'key3')

thisdict = dict.fromkeys(x)

print(thisdict)

data = { 1: "lakshmi",
         2:"manasvi",
         3: "shreyank",
         4:"none"}

#print(data.setdefault(4, "not found"))  
data.get(4)
print(data.get(4, "notfound"))
print(data)

The setdefault() method returns the value of the item with the specified key.

If the key does not exist, insert the key, with the specified value

#Syntax:
dictionary.setdefault(keyname, value)


#Parameter                	             Description
keyname	(Required)              The keyname of the item you want to return the value from

value	(Optional)                If the key exist, this parameter has no effect.
                                If the key does not exist, this value becomes the key's value
                                Default value None

#Get the value of the "model" item:

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.setdefault("model", "Bronco")  # here If the key exist, this parameters has no effect in the dict

print(x)

# Example ----> Get the value of the "color" item, if the "color" item does not exist, insert "color" with the value "white":

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.setdefault("color", "white")

print(x)
print(car)

# Dictonary examples
places = {
    'country':[],
    'city':[]
}
for a in range(5): # a= 0, a = 1, a = 2,.....untill the sequence ends
  b = input("Enter name of country")
  c = input("Enter name of city")
  places['country'].append(b)
  places['city'].append(c)
print(places)


print("Niksh")
print("--------")
for i in range(5):
  print("|",places['country'][i],"\t|",places['city'][i],"\t|")
  print(" -------------------------------")





"""https://pynative.com/python-dictionary-quiz/ - quizz

"""