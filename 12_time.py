# -*- coding: utf-8 -*-
"""12. Time.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/132AsX21puDCjJzTTw7JsF_Cnncw7yBQA
"""



"""datetime — Basic date and time types
Source code: Lib/datetime.py

The datetime module supplies classes for manipulating dates and times.

# time — Time access and conversions

* This module provides various time-related functions. 

* To use functions defined in the module, we need to import the module first. Here's how:

```
import time
```
"""





"""* UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or GMT). The acronym UTC is not a mistake but a compromise between English and French.

* DST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.

* The precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock “ticks” only 50 or 100 times a second.

* The time value as returned by gmtime(), localtime(), and strptime(), and accepted by asctime(), mktime() and strftime(), is a sequence of 9 integers. The return values of gmtime(), localtime(), and strptime() also offer attribute names for individual fields.

## To know time zones in world
https://en.wikipedia.org/wiki/List_of_tz_database_time_zones - List of tz database time zones
"""

import time
dir(time)

"""
Python **time.time()**

  * The time() function returns the ***number of seconds passed since epoch***.

    * For Unix system, January 1, 1970, 00:00:00 at UTC is epoch (the point where time begins).

    * The epoch is the point where the time starts, and is platform dependent. For Unix, the epoch is January 1, 1970, 00:00:00 (UTC). 
    * To find out what the epoch is on a given platform, look at **time.gmtime(0)**.
"""

import time
seconds = time.time()
print("Seconds since epoch =", seconds)

"""## Python time.ctime()
The time.ctime() function takes seconds passed since epoch as an argument and returns a string representing local time.

"""

import time
# seconds passed since epoch
seconds = 1545925769.9618232
local_time = time.ctime(seconds)
print("Local time:", local_time)

"""## Python time.sleep()
The sleep() function suspends (delays) execution of the current thread for the given number of seconds.


"""

import time
print("This is printed immediately.")
time.sleep(2.4)
print("This is printed after 2.4 seconds.")





"""## Python time.gmtime()
The gmtime() function takes the number of seconds passed since epoch as an argument and returns struct_time in UTC.

* If no argument or None is passed to gmtime(), the value returned by time() is used.
"""

import time
result = time.gmtime(1545925769)  # If no argument or None is passed to gmtime(), the value returned by time() is used.
print("result:", result)
print("\nyear:", result.tm_year)
print("tm_hour:", result.tm_hour)



"""Before we talk about other time-related functions, let's explore time.struct_time class in brief.

**time.struct_time Class**
* Several functions in the time module such as gmtime(), asctime() etc. either take time.struct_time object as an argument or return it.

Here's an example of time.struct_time object.

```
time.struct_time(tm_year=2018, tm_mon=12, tm_mday=27, 
                    tm_hour=6, tm_min=35, tm_sec=17, 
                    tm_wday=3, tm_yday=361, tm_isdst=0)
```  
* The values (elements) of the time.struct_time object are accessible using both indices and attributes.

"""

* Index	Attribute	Values
  * 0   tm_year	    0000, ...., 2018, ..., 9999
  * 1	  tm_mon	    1, 2, ..., 12
  * 2	  tm_mday	    1, 2, ..., 31
  * 3	  tm_hour	    0, 1, ..., 23
  * 4	  tm_min	    0, 1, ..., 59
  * 5	  tm_sec	    0, 1, ..., 61
  * 6	  tm_wday	    0, 1, ..., 6; Monday is 0
  * 7	  tm_yday	    1, 2, ..., 366
  * 8	  tm_isdst	  0, 1 , (-1 when unknown)

"""## Python time.localtime()
The localtime() function takes the number of seconds passed since epoch as an argument and returns struct_time in local time.
  * If no argument or None is passed to localtime(), the value returned by time() is used.

"""

import time
result = time.localtime(1545925769)
print("result:", result)
print("\nyear:", result.tm_year)
print("tm_hour:", result.tm_hour)

"""## Python time.mktime()
The mktime() function takes struct_time (or a tuple containing 9 elements corresponding to struct_time) as an argument and returns the seconds passed since epoch in local time. Basically, it's the inverse function of localtime().

"""

import time
t = (2018, 12, 28, 8, 44, 4, 4, 362, 0)
local_time = time.mktime(t)
print("Local time:", local_time)

# The example below shows how mktime() and localtime() are related.

import time

seconds = 1545925769

# returns struct_time
t = time.localtime(seconds)
print("t1: ", t)

# returns seconds from struct_time
s = time.mktime(t)
print("\s:", seconds)

"""## Python time.asctime()
The asctime() function takes struct_time (or a tuple containing 9 elements corresponding to struct_time) as an argument and returns a string representing it. Here's an example:

"""

import time
t = (2018, 12, 28, 8, 44, 4, 4, 362, 0)
result = time.asctime(t)
print("Result:", result)

"""## Python time.strftime()
The strftime() function takes struct_time (or tuple corresponding to it) as an argument and returns a string representing it based on the format code used. For example,

To learn more, visit: time.strftime().
https://docs.python.org/3/library/time.html#module-time 

"""

import time
named_tuple = time.localtime() # get struct_time
time_string = time.strftime("%m/%d/%Y, %H:%M:%S", named_tuple)
print(time_string)

# Commented out IPython magic to ensure Python compatibility.

Here, %Y, %m, %d, %H etc. are format codes.

# %Y - year [0001,..., 2018, 2019,..., 9999]
# %m - month [01, 02, ..., 11, 12]
# %d - day [01, 02, ..., 30, 31]
# %H - hour [00, 01, ..., 22, 23
# %M - minutes [00, 01, ..., 58, 59]
# %S - second [00, 01, ..., 58, 61]

"""## Python time.strptime()
The strptime() function parses a string representing time and returns struct_time.


"""

import time
time_string = "21 June, 2018"
result = time.strptime(time_string, "%d %B, %Y")

print(result)



"""# Python sleep()
* The sleep() function suspends (waits) execution of the current thread for a given number of seconds.

* Python has a module named time which provides several useful functions to handle time-related tasks. One of the popular functions among them is sleep().

* The sleep() function suspends execution of the current thread for a given number of seconds.

"""

#Example 1: Python sleep()

import time

print("Printed immediately.")
time.sleep(2.4)
print("Printed after 2.4 seconds.")

"""Here's how this program works:


```

"Printed immediately" is printed
Suspends (Delays) execution for 2.4 seconds.
"Printed after 2.4 seconds" is printed.
```



As you can see from the above example, sleep() takes a floating-point number as an argument.

Before Python 3.5, the actual suspension time may be less than the argument specified to the time() function.

Since Python 3.5, the suspension time will be at least the seconds specified.
"""

#Example 2: Python create a digital clock
import time

while True:
  localtime = time.localtime()
  result = time.strftime("%I:%M:%S %p", localtime)
  print(result)
  time.sleep(1)  # runs infinite times

In the above program, we computed and printed the current local time inside the infinite while loop. Then, the program waits for 1 second.
Again, the current local time is computed and printed. This process goes on.

When you run the program, the output will be something like:

02:10:50 PM
02:10:51 PM
02:10:52 PM
02:10:53 PM
02:10:54 PM
... .. ...

# Here is a slightly modified better version of the above program.
import time

while True:
  localtime = time.localtime()
  result = time.strftime("%I:%M:%S %p", localtime)
  print(result, end="", flush=True)
  print("\r", end="", flush=True)
  time.sleep(1)

"""
For more info visit :

* https://www.programiz.com/python-programming/time 

* https://www.w3schools.com/python/python_datetime.asp 

* https://www.techbeamers.com/python-time-functions-usage-examples/ - interms of simple word explanations 

* https://www.alphacodingskills.com/python/python-dates.php  - Datetime module usage 

* https://www.javatpoint.com/python-date 

To learn more, visit: time.strftime().
https://docs.python.org/3/library/time.html#module-time 

https://www.w3schools.com/python/python_datetime.asp 

https://www.edureka.co/blog/date-time-in-python/ 


"""

# Commented out IPython magic to ensure Python compatibility.
# # A reference of all the legal format codes:
# 
# Directive	            Description	                                                Example	Try it
# %a	           Weekday, short version	                                                Wed	
# %A	           Weekday, full version	                                                Wednesday	
# %w	           Weekday as a number 0-6, 0 is Sunday	                                  3	
# %d	           Day of month 01-31	                                                    31	
# %b	           Month name, short version	                                            Dec	
# %B	           Month name, full version	                                              December	
# %m	           Month as a number 01-12	                                              12	
# %y	           Year, short version, without century	                                  18	
# %Y	           Year, full version	                                                    2018	
# %H	           Hour 00-23	                                                            17	
# %I	           Hour 00-12	                                                            05	
# %p	           AM/PM	                                                                PM	
# %M	           Minute 00-59	                                                          41	
# %S	           Second 00-59	                                                          08	
# %f	           Microsecond 000000-999999	                                            548513	
# %z	           UTC offset	                                                            +0100	
# %Z	           Timezone	                                                              CST	
# %j	           Day number of year 001-366	                                            365	
# %U	           Week number of year, Sunday as the first day of week, 00-53	          52	
# %W	           Week number of year, Monday as the first day of week, 00-53	          52	
# %c	           Local version of date and time	                                        Mon Dec 31 17:41:00 2018	
# %x	           Local version of date	                                                12/31/18	
# %X	           Local version of time	                                                17:41:00	
# %%	           A % character	                                                        %	
# %G	           ISO 8601 year	                                                        2018	
# %u	           ISO 8601 weekday (1-7)	                                                1	
# %V	           ISO 8601 weeknumber (01-53)	                                          01	
#



"""https://colab.research.google.com/drive/1HHUQRyz7n5kHUWHFb9r9Dk5SiYOW5Rkf?usp=sharing  - For DateTime Notes

"""