# -*- coding: utf-8 -*-
"""Loops_py_B2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VPGpMGk7qb17wNUzSxplELmLQSpF3D8y
"""

Python Conditions and If statements
Python supports the usual logical conditions from mathematics:

Equals: a == b
Not Equals: a != b
Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b
These conditions can be used in several ways, most commonly in "if statements" and loops.

An "if statement" is written by using the if keyword.

Example
if condition_statement :
  body
  print()
  print()

print("Hello")


a = 33
b = 200
if b > a:
  print("b is greater than a")
In this example we use two variables, a and b, which are used as part of the if statement to test whether b is greater than a. 
As a is 33, and b is 200, we know that 200 is greater than 33, and so we print to screen that "b is greater than a".

Indentation
Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.

if 5 == 6 :  # here now if condition is false
  print("a is equal to b")  
else :
  print("a is not equal to b")



if 6 == 6 :  # here now if condition is True
  print("a is equal to b")   # here now it executes the print staement

# we can write elif block only in b\n if & else
a= 6
b= 7

if a > b :
  print("greater")
elif a==b:
  print("equal")
else:
  print("lesser")

#Example
#If statement, without indentation (will raise an error):

a = 33
b = 20
if b > a:
print("b is greater than a") # you will get an error
else :
  print("a greater than b")

#Elif
#The elif keyword is pythons way of saying "if the previous conditions were not true, then try this condition".
# In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that "a and b are equal".

#Example
a = 33
b = 31
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else : 
  print("a is greater than b")

Else
The else keyword catches anything which isn't caught by the preceding conditions.

Example
a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

In this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that "a is greater than b".

You can also have an else without the elif:

Example
a = 200
b = 33
if b > a:
  print("b is greater than a")
else:
  print("a is greater than b")

# Short Hand if ----> If you have only one statement to execute, you can put it on the same line as the if statement.

# Example:  One line if statement:

if a > b: print("a is greater than b")


# Short Hand If ... Else   ------> If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:
#Example:  One line if else statement:

a = 2
b = 330
print("A") if a > b else print("B")               # This technique is known as Ternary Operators, or Conditional Expressions.

a = 2
b = 330
print("A") if a > b else print("B")

# You can also have multiple else statements on the same line:
# Example :  One line if else statement, with 3 conditions:

a = 329
b = 330
print("A") if a > b else print("=") if a == b else print("B")

# print("A") if a > b else {print("=") if a == b else print("B")} -----> comes under else



a = 330
b = 330
if a>b :
  print("a")
  if a >200:
    print( "a <200")
else :
  if a == b:
    print("=")

else : 
  print("B is greater")

#And  --->  The and keyword is a logical operator, and is used to combine conditional statements:

#Example --->  Test if a is greater than b, AND if c is greater than a:

a = 600
b = 33
c = 500
if a > b and a > c:             # when ever "Both conditions are True"
  print("a is greater than b, c")

else : 
  print("Both conditions are not True")

# print('hello')

Or  --->  The or keyword is a logical operator, and is used to combine conditional statements:

Example ---> Test if a is greater than b, OR if a is greater than c:

a = 200
b = 33
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")

#Nested If  --->  You can have if statements inside if statements, this is called nested if statements.

#Example
x = 15

if x > 10:
  print("Above ten,")
  if x > 20:
    print("and also above 20!")
    
  else:
    print("but not above 20.")
else:
  print("below ten")

"""### pass Statement"""

The pass Statement
if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.

if 3 == 4 :   # here  if block is false
 pass
else:
  print("they are not equal numbers")

print("numbers")

#Example
a = 33
b = 200

if b > a:  # we should keep a "pass" keyword for an empty if /elif statements
  pass  # if pass keyword is not present then we get an error (unexpected EOF while parsing)
elif a > b :
  print("a")
  
else:
  print(a)

print("hii")

"""# For Loop

"""

For Loops ----> A for loop iterates over a sequence of elements, executing the body of the loop for each element in the sequence.

# Syntax:

for variable in sequence :
    body

x = [1234, 5768]
for i in x :
  i + 1
  print(i)
  print(i+1)
  print("\n ")

for i in  "string" :
  #i = i + 1
  print(i)

x= "string"
for i in  x :
  #i = i + 1
  print(i)

for i in  "string", "nek" :
  #i = i + 1
  print(i)

print(type(100000))
print(type("1000000"))

for i in "10000000":   # for loop iteration for 8 times
  print(i)

Note - Integers are not iterable.
---> strings are iterable

x = [1,2,3,4,5,6,7,89, 9, 10]
for i in 1,2,3,4,5,6,7,89, 9, 10 :   # for loop iteration for 10 times
  print("hello")

x = [1,2,3,4,5,6,7,89, 9, 10]
for i in x :   # for loop iteration for 10 times
  print("hello")

for i in "hello", "world":  # here it takes 1 whole string as 1 element/item/value
  print(i)

"""The **range()** function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.

Syntax:- 

range(start, stop, step)

Parameter	Description
* start	(Optional) -  An integer number specifying at which position to start. Default is 0
* stop	(Required) -  An integer number specifying at which position to stop (not included).
* step	(Optional) -  An integer number specifying the incrementation. Default is 1
"""

The range() function:
range() generates a sequence of integer numbers. It can take one, two, or three parameters:

range(start, end, increment)   -----> end value should be specified
# start & increment parameters are optional & has default values as start = 0, increment = 1


   parameter                        Parameter	Description                              parameter value
start	Optional.     An integer number specifying at which position to start.             Default is 0
stop	Required.     An integer number specifying at which position to stop               (not included).
step	Optional.     An integer number specifying the incrementation.                     Default is 1

Ex:-
range(n): 0, 1, 2, ... n-1
range(x,y): x, x+1, x+2, ... y-1
range(p,q,r): p, p+r, p+2r, p+3r, ... q-1 (if it's a valid increment)

Common pitfalls:-
Forgetting that the upper limit of a range() isn’t included.
Iterating over non-sequences. Integer numbers aren’t iterable. Strings are iterable letter by letter, but that might not be what you want.

Typical use:
For loops are mostly used when there's a pre-defined sequence or range of numbers to iterate.

range(11)  --> it will give numbers from 0 to 10
range(1,11) --> it will give numbers from 1 to 10
range(290)
range(10,40)   # here 10 is start vale, & 40 is stop parameter
range(10, 20, 2)

for i in range(3):
  print(i)

for i in range(10,40) :
  print(i)

for i in range(1,11,3) : # 1 + 3 =4 +3 = 7+ 3 =10
  print(i)

for i in range(0,11 , 2) :  # the number generatiion stops at 11 
  print(i, end = "\t")             # it print numbers from 0 to 10

for i in range(-20,0) :  # from 0 to -20,....... In number system we have like -20 to 0 to 20 numbers etc
  print(i)

for i in range(-20,-11,) :   # here its increment
  print(i)

for i in range(-11, -21, -1):
  print(i)

for i in range(50,20, -1):  # backward numbers
  print(i)

for i in range(-10 , -1 , ) :  #-10 + (-1) = -11, -10 + 1 = -9
         range( 1, 10 )  # prints in forwards  dir --->  i.e  prints from 1,2,3,4.....10
         range (10, 1, -1) # printing postive num in bacwards   ------> 10,9,8,7......2
         range(-1, -10, -1) # print -1 to -10 -----> forward direction  for negative numbers  -----> -1, -2, -3,-4......-9
         range(-10, -1) # prints no's from -10 to -1   ----> backward direction for negetive numbers

  print(i)

# Example ----> Create a sequence of numbers from 3 to 19, but increment by 2 instead of 1:

x = range(3, 20, 2)   # here 2 is the increment value to be added for each  ------> when ever we right the increment parameter, we need to specify all the 3 parameters
for n in x:
  print(n)

for i in range(10):
  print("hello")

# Example  ----> Create a sequence of numbers from 3 to 5, and print each item in the sequence:

x = range(3, 6)
for n in x:
  print(n, end = "\t")

for i in range(10,0,-1):   # backward numbers in sequence    ----> start = higher value from which u need to start, stop = lower  number
  print(i, end = "\t")     # print numbers in backwards

# Multiplication table (from 1 to 10) in Python

num = 12

# To take input from the user
# num = int(input("Display multiplication table of? "))

# Iterate 10 times from i = 1 to 10
for i in range(1, 11):
   print(num, 'x', i, '=', num*i)

While Loops
A while loop executes the body of the loop while the "condition remains True".

Syntax:

while condition :
    body

Note:- 

Things to watch out for! --> 
* Failure to initialize variables. Make sure all the variables used in the loop’s condition are initialized before the loop.
* Unintended infinite loops. Make sure that the body of the loop modifies the variables used in the condition, 
  so that the loop will eventually end for all possible values of the variables.

Typical use:

* While loops are mostly used "when there’s an unknown number of operations to be performed", and a "condition needs to be checked at each iteration".

i = 1
while i <= 10 :
  print (i)
  i += 1 # i = i +1  # increment the number

print(1<=10)

i = 1 
while True :
  print(1)
  print(2)
  print(3)
  ask = input("want to print again: ")
  if ask.lower() == "yes" :
    pass
  else:
    break

for i in range(1,11):
  print(i)

i = 1    # first we need to initialise the variable ( means to give/assigning a datatypes/values to the variable )
while i < 500:
  print(i, end = "\t")
  i += 2  # it increments the i value by adding 1 to it ( i.e i = i+1 => 1+1 =2 ; 2+1 = 3)
 # i = i+1

a = "manasvi"
i = 0
while i < len(a):
  print(a[i])
  i += 1

a = "mansavi"   # string are iterable
# a = 256378   # integrs are not iterable 
for i in a :
  print(i)

"""### Break & Continue"""

Break & Continue
You can interrupt both while and for loops using the break keyword. We normally do this to interrupt a cycle due to a separate condition.

You can use the continue keyword to skip the current iteration and continue with the next one. 
This is typically used to jump ahead when some of the elements of the sequence aren’t relevant.

#The break Statement  -->  With the break statement we can stop the loop even if the while condition is true:


i = 1
while i < 6:
  print(i)
  
  if i == 3:   
    break   # Exit the loop when i is 3:
  i += 1

while True :
  print("hello")
  ask = input("do u want to run the game again")
  if ask.lower() == "yes" :
    break

# Example  --->  Continue to the next iteration if i is 3:
i = 0
while i < 6:
  i += 1
  if i == 3:
    continue #i +=1  # loop iterates for infinite time as i = 3 evry time due to continue keyword
  print(i)

The continue Statement  --->  With the continue statement we can stop the current iteration, and continue with the next iteration/repetition:

Continue : 
Continue is also a loop control statement just like the break statement. 
continue statement is opposite to that of break statement, instead of terminating the loop, it forces to execute the next iteration of the loop.

As the name suggests the continue statement forces the loop to continue or execute the next iteration.
 When the continue statement is executed in the loop, the code inside the loop following 
 the continue statement will be skipped and the next iteration of the loop will begin.

The else Statement  --->  With the else statement we can run a block of code once when the condition no longer is true:

Example
Print a message once the condition is false:

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

Nested Loops  --->  A nested loop is a loop inside a loop.

The "inner loop" will be executed one time for each iteration of the "outer loop":

for i in sequence1 :
  body of 1st for loop
  for j in sequence2 :
    body  of 2nd for loop

  body of 1st for loop

Example  --->  Print each adjective for every fruit:

adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)











classA ={
    'names':[],
    'gift':[]
}
for i in range(6):
  name = input("enter your name: ")
  classA['names'].append(name)
  missed = int(input("Enter classes missed "))
  attendance = ((12-missed)/12)*100
  if attendance ==100:
    classA['gift'].append("Chocolates")
  elif attendance >=80:
    classA['gift'].append("Bananas")
  else:
    classA['gift'].append("Nothing :'(")
print(classA)

num = 5
for i in range(1,10):
  print(f"{num} x {i} = {num*i}")



#1. Pin checker ---binary -->
#2. Grades ---many ---> 
#3. Odd/even --binary ---> 
#4. +/- --- binary ---> 
#5. Male/Female --- binary ---->
#6. class levels --- many ---->
#7. House number ----> 
Tasks - Homework
# 1. Make a change calculator - tell the number of notes/coins in highest denomination
# 2. Make a time converter from 24 hour to 12 hour system, and tell whether it is morning, midday, afternoon, evening, or night time.