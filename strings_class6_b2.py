# -*- coding: utf-8 -*-
"""strings_class6_B2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wwFFAHfgSZPI-6AzcCe9zmbpEost52uO

# Strings 
https://www.programiz.com/python-programming/string
* string is a datatype which stores characters 

> * 

https://docs.python.org/3/library/string.html

https://docs.python.org/3/tutorial/introduction.html 

https://docs.python.org/3/library/stdtypes.html#textseq
"""

int
float =  8
x = 3
v = "hello world()*799"  # note that whitespace is also a single charcter in string data type

s = ""

DOB = int(input("Enter your date of birth: "))  # by default input fun takes the value as string datatype
present_year = int(input("Enter your present year: "))
Age = present_year - DOB
print("yor age is ", Age)

To convert string into integer - int()
To convert integer into string  - str()

x = int("3")
print(type(x))
y = "3"
print(type(y))
z = str(3)
print(type(z))

#Strings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes. 
#Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable. 

#For example −

var1 = 'Hello World!'
#       0123456789 10   ---->index numbers
x = var1[0:5]
print(x)
var2 = "Python Programming"

"""## Escape charecters
 
 * \t - used for tab spacing
 * \n - used for pointing to a new line
 * \r - char ridge

https://www.tutorialspoint.com/python/python_strings.htm - info of Escape charecters
"""

'spam eggs'  # single quotes

'doesn\'t'  # use \' to escape the single quote...
# prints like this ---> "doesn't"
# or 
"doesn't"  # ...or use double quotes instead
"doesn't"

'"Yes," they said.'
'"Yes," they said.'
# or 
"\"Yes,\" they said."
'"Yes," they said.'

'"Isn\'t," they said.'
'"Isn\'t," they said.'

print(" the color of ball1 is:\t\tred") # \t is used for tab spacing
print(" the color of ball2 is:\t\tblue")

print( "hello python \nhave a good day")  # \n is used as a new line char, 
print( "hello python \rhave a good day") # \r is used to trim/cut the part before it







"""# Slicing the Strings

* we can get the specifc part of the string by using slicing the string
* we can make a new string by slicing a string
* [ start index num : end index num ] to get a specified range of the string

"""

#012345678910 
"hello wolrd"
-11-10-9-8....

x = "Hello world"     # we have 11 charcters in the string
    #012345678910   ---> index numbers

variablename[startindex : stopindex]
variablename[index]---> then u wil get the value of the specified index number

print(len(x))
print(x[6:] )  # it means [6:last index number of the string]   ==> x[6:] = x[6:]
print("x[7:9]", x[7:9] )
print(x[:5] )   # ==> x[0:5] = x[:5]
print(x[4])
print(x[0:4])   # to get / access single charecter
print(x[:])
print(x[6])

x = 'Hello World'
#    0123456789
#    -11-10
print(len(x))
print(x[8])
print(x[6])   # access 1 single charecter in the string
print("x[-5]",x[-5])
print(x[-3])
print(x[2:7])
print(x[-11:-5])
print(x[:])  # when enmpty with colon it takes the start & end values of the index numbers
print(x[:6])
print(x[:-3])
print(x[2:])
print(x[-6:])
print(x[-11:-6])

# len() - length func was to know the length of the stings 

x = "hello world!"

print(len(x))

01234567
"Hello Hi"
-8-7

"""### Negative indexing of a string

```
0   1  2  3  4  --->  is positive indexing, which starts from 0
h   e  l  l  o
-5 -4 -3 -2 -1    ----> this is negative indexing which starts from -len of tht string
```



Note:-  both indexing will read from left to right 

i.e -> x = "hello"

print(x[0:5])

print([-5:-1)


"""

x = "hello"
print(x[0:5]) # from 0 read from left to right
print(x[-5:-1])   # from -5 reads from left to right , i.e from 1st charecter

#012345678910    ---> positive indexing
x = "Hello world"
    #-11-10-9       ----> negative indexing
y = x[-5:]   # [start : end - 1]
print(x[:-6]) # [:-6]means it takes before colon 
print(x[-9 : ])   # negative indexing 
print(y)

help(str)

len(variable_name) # gives the length of the variable -strring 

variable_name[index_number] # gives the value of the index number provided

x = "hello 7"
#    0123456 ---> index numbers
print(len(x))   # gives length  of the string
print(x[5])

x= "python "
y = "strings"
z =x+y
print(z)
print("python " + "string " + "hii " + "6&*$") # here + is a concatenation operator----> to join  strings

"""##Accessing Values in Strings



"""

Python does not support a character type; these are treated as strings of length one, thus also considered a substring.

To access substrings, use the square brackets for slicing along with the index or indices to obtain your substring. For example −

In a string the positive index starts fro 0 to (length -1) numbers ---> starts from 1st character

for negative indexing it starts from -1 to length of the string --> strts frm last character





"""![](https://pi.lbbcdn.com/wp-content/uploads/2020/01/Python-Arrays-Index-example-diagram.png)


"""



python reference - https://docs.python.org/3/reference/index.html 

string methods - https://www.w3schools.com/python/python_ref_string.asp 

operators - https://colab.research.google.com/drive/1KgfpI3OF4JtBse5q18-7ry0RvVqvFotI?usp=sharing



# String Methods
# Python has a set of built-in methods that you can use on strings.

a = " Hello, World! "

#The strip() method removes any whitespace from the beginning or the end:

print(a.strip()) # returns "Hello, World!"

#The lower() method returns the string in lower case:

a = "Hello, World!"
x = a.lower()
print(x)
print(a.lower())  # returns the string in lower case letters

#The upper() method returns the string in upper case:

a = "Hello, World!"
print(a.upper()) # returns the string in upper case letters
print(a.lower())

#The replace() method replaces a string with another string:

a = "Hello, Jorld!"
a = a.replace("J", "W")  # "Hello World!"  ---> replaces "J" with "W"
x = a.replace("World", "India") # "Hello India!"   ---> replaces "World" with "India"
print(a[-6:])
print(x)

a = "HelloWorld7"
print(a.isalnum())
print(a.isupper())

a = "Hello, World7!"
print(a.isprintable())

#The split() method splits the string into substrings if it finds instances of the separator:

a = "Hello, World!"
print(a.split("W")) # returns ['Hello', ' World!']

#new line character - "\n"
print(" First things first\n\n I will say all the words inside my head \n\n I'm fired and tired of the \r way things have been")

#tab character - \t
print("First things first\t I will say all the words inside my head \t I'm fired and tired of the way things have been") # \t is a tab character



"""https://www.tutorialspoint.com/python/python_strings.htm - info of Escape charecters


"""

#You will get an error if you use double quotes inside a string that is surrounded by double quotes:

txt = "We are the so-called "Vikings" from the north."

# To fix this problem, use the escape character \":

# The escape character allows you to use double quotes when you normally would not be allowed:

txt = "We are the so-called \"Vikings\" from the north."

"""###Check String
To check if a certain phrase or character is present in a string, we can use the keywords **in** or **not in**.
"""

#Check if the phrase "ain" is present in the following text:

txt = "The rain in Spain stays mainly in the plain"
x = "ain " in txt
print(x)
#Example
#Check if the phrase "ain" is NOT present in the following text:

txt = "The rain in Spain stays mainly in the plain"
x = "ain" not in txt
print(x)

txt = "The rain in Spain stays mainly in the plain"
print(txt.count("The rain"))

print("hello \r world")  # returns the characters after \r

print("a" + "b")

"""##String Methods
* string methods - https://www.w3schools.com/python/python_ref_string.asp  
Python has a set of **built-in methods** that you can use on strings.

Note: All string methods returns new values. They do not change the original string. A method is a function that “belongs to” an object.

**Method	Description**

* **capitalize()** -	Converts the first character to upper case
* **casefold()** -	Converts string into lower case
* **center()** -	Returns a centered string
* **count()** -	Returns the number of times a specified value occurs in a string
* **encode()** -	Returns an encoded version of the string
* **endswith()** -	Returns true if the string ends with the specified value
* **expandtabs()** -	Sets the tab size of the string
* **find()** -	Searches the string for a specified value and returns the position of where it was found
* **format()**	- Formats specified values in a string
* **format_map()** -	Formats specified values in a string
* **index()** -	Searches the string for a specified value and returns the position of where it was found
* **isalnum()** -	Returns True if all characters in the string are alphanumeric
* **isalpha()** -	Returns True if all characters in the string are in the alphabet
* **isdecimal()** -	Returns True if all characters in the string are decimals
* **isdigit()**	Returns True if all characters in the string are digits
* **isidentifier()**	Returns True if the string is an identifier
* **islower()**	Returns True if all characters in the string are lower case
* **isnumeric()**	Returns True if all characters in the string are numeric
* **isprintable()**	 Returns True if all characters in the string are printable
* **isspace()** - 	Returns True if all characters in the string are whitespaces
* **istitle()** - 	Returns True if the string follows the rules of a title
* **isupper()**	Returns True if all characters in the string are upper case
* **join()**	Joins the elements of an iterable to the end of the string
* **ljust()**	Returns a left justified version of the string
* **lower()**	Converts a string into lower case
* **lstrip()**	Returns a left trim version of the string
* **maketrans()**	Returns a translation table to be used in translations
* **partition()**	Returns a tuple where the string is parted into three parts
* **replace()**	Returns a string where a specified value is replaced with a specified value
* **rfind()**	Searches the string for a specified value and returns the last position of where it was found
* **rindex()**	Searches the string for a specified value and returns the last position of where it was found
* **rjust()**	Returns a right justified version of the string
* **rpartition()**	Returns a tuple where the string is parted into three parts
* **rsplit()**	Splits the string at the specified separator, and returns a list
* **rstrip()**	Returns a right trim version of the string
* **split()**	Splits the string at the specified separator, and returns a list
* **splitlines()**	Splits the string at line breaks and returns a list
* **startswith()**	Returns true if the string starts with the specified value
* **strip()**	Returns a trimmed version of the string
* **swapcase()**	Swaps cases, lower case becomes upper case and vice versa
* **title()**	Converts the first character of each word to upper case
* **translate()**	Returns a translated string
* **upper()**	Converts a string into upper case
* **zfill()** 	Fills the string with a specified number of 0 values at the beginning
"""

help(str)
variablename.methodname()

x = "today is sunday"
#    012345
print(len(x))
print(x.capitalize())   # S.capitalize() -> str  ----> Return a capitalized version of S, i.e. make the first character have upper case and the rest lower case.
print("yes".capitalize())
print(x.casefold())     #S.casefold() -> str   -----> Return a version of S suitable for caseless comparisons.
print(x.lower())    # S.lower() -> str  ----> Return a copy of the string S converted to lowercase.

print(x.upper())    # S.upper() -> str   -----> Return a copy of S converted to uppercase.

print(x.center(30,"0"))   # S.center(width[, fillchar]) -> str

#Return S centered in a string of length width. Padding is
#done using the specified fill character (default is a space)

print(x.count("a"))
print(x.count("day"))   # S.count(sub[, start[, end]]) -> int

#Return the number of non-overlapping occurrences of substring sub in
#string S[start:end].  Optional arguments start and end are
#interpreted as in slice notation.

print(x.encode())   # S.encode(encoding='utf-8', errors='strict') -> bytes

#Encode S using the codec registered for encoding. Default encoding
#is 'utf-8'. errors may be given to set a different error
#handling scheme. Default is 'strict' meaning that encoding errors raise
#a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
#'xmlcharrefreplace' as well as any other name registered with
# codecs.register_error that can handle UnicodeEncodeErrors.
print(x.endswith("y"))
print(x.endswith("ay")) # S.endswith(suffix[, start[, end]]) -> bool

#Return True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position.
#suffix can also be a tuple of strings to try.
print(len(x))
x = "today is sun\tday"
print(x.expandtabs(20))  # S.expandtabs(tabsize=8) -> str

#Return a copy of S where all tab characters are expanded using spaces. If tabsize is not given, a tab size of 8 characters is assumed.
print(x.find("a"))  # gives the index number of first occurence of the char
print(x.find("is"))
print(x.index("a"))

#S.find(sub[, start[, end]]) -> int

#Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation.

#Return -1 on failure.

print(x.rfind("a")) # gives the index number of last occurence of the char
print(x.rindex("a"))

#Check if all the characters in the unicode object are decimals:

txt = "\u0033" #unicode for 3

x = txt.isdecimal()

print(x)

x = "today is sunday"
print(x.isalnum())  # S.isalnum() -> bool    Return True if all characters in S are alphanumeric and there is at least one character in S, False otherwise.
print(x.isalpha()) # S.isalpha() -> bool Return True if all characters in S are alphabetic and there is at least one character in S, False otherwise.
print(x.isdecimal())
print(x.isdigit())
print(x.isidentifier())
print(x.islower())
print(x.isupper())

print(x.isnumeric())

print(x.isprintable())
print(x.isspace())
print(x.istitle()) 
y = "1234567"
z = x.join(y)
print(z)
print(x.ljust(30,"!"))
print(x.rjust(25,"!"))
print(x.partition("is")) # S.partition(sep) -> (head, sep, tail) Search for the separator sep in S, and return the part before it,
# the separator itself, and the part after it.  If the separator is not found, return S and two empty strings.
print(x.rpartition('is'))
print(x.rsplit("a",1))
print(x.rsplit("a"))
print(x.replace("sunday","monday"))
print(x.split("a"))
print(x.splitlines(2))
print(x.startswith("t"))
print(x.strip("a"))
print(x.swapcase()) # S.swapcase() -> str  Return a copy of S with uppercase characters converted to lowercase and vice versa.
print(x.title())
# print(x.translate())
print(x.zfill(30))











a = "   hello world   "
x = a.capitalize()
print(x)
print(a.upper())
print(a.casefold())
print(a.lower())
print(a.center(15, "0"))
y = a.strip()
print(y, "strip " ,)    # used to remove white spaces at begining & ending of the string
print(a.zfill(15))
print(a.isalpha())
print(a.isalnum())   # Return True if all characters in S are alphanumeric and there is at least one character in S, False otherwise.
a = "1234"
print(a.isdigit())  # Return True if all characters in S are digits and there is at least one character in S, False otherwise.
a ="12.6"
print(a.isdecimal())  # Return True if there are only decimal characters in S,False otherwise.

x = "  hello  "
print(x.zfill(10))
print(x.isdigit())
print(x.rfind("l"))
print(x.strip())

S.strip([chars]) -> str

Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.

123
!@$
a = 123
b =





"""https://www.programiz.com/python-programming/methods/string/center 

https://www.w3schools.com/python/python_ref_string.asp
"""

Example
Where in the text is the last occurrence of the string "casa"?:

txt = "Mi casa, su casa."

x = txt.rfind("casa")

print(x)
Definition and Usage
The rfind() method finds the last occurrence of the specified value.

The rfind() method returns -1 if the value is not found.

The rfind() method is almost the same as the rindex() method. See example below.

Syntax
string.rfind(value, start, end)
Parameter Values
Parameter	Description
value	Required. The value to search for
start	Optional. Where to start the search. Default is 0
end	Optional. Where to end the search. Default is to the end of the string
More Examples
Example
Where in the text is the last occurrence of the letter "e"?:

txt = "Hello, welcome to my world."

x = txt.rfind("e")

print(x)
Example
Where in the text is the last occurrence of the letter "e" when you only search between position 5 and 10?:

txt = "Hello, welcome to my world."

x = txt.rfind("e", 5, 10)

print(x)
Example
If the value is not found, the rfind() method returns -1, but the rindex() method will raise an exception:

txt = "Hello, welcome to my world."

print(txt.rfind("q"))
print(txt.rindex("q"))

help(str.split)

Example
Where in the text is the last occurrence of the string "casa"?:

txt = "Mi casa, su casa."

x = txt.rindex("casa")

print(x)
Definition and Usage
The rindex() method finds the last occurrence of the specified value.

The rindex() method raises an exception if the value is not found.

The rindex() method is almost the same as the rfind() method. See example below.

Syntax
string.rindex(value, start, end)
Parameter Values
Parameter	Description
value	Required. The value to search for
start	Optional. Where to start the search. Default is 0
end	Optional. Where to end the search. Default is to the end of the string
More Examples
Example
Where in the text is the last occurrence of the letter "e"?:

txt = "Hello, welcome to my world."

x = txt.rindex("e")

print(x)
Example
Where in the text is the last occurrence of the letter "e" when you only search between position 5 and 10?:

txt = "Hello, welcome to my world."

x = txt.rindex("e", 5, 10)

print(x)
Example
If the value is not found, the rfind() method returns -1, but the rindex() method will raise an exception:

txt = "Hello, welcome to my world."

print(txt.rfind("q"))
print(txt.rindex("q"))

#Upper case the first letter in this sentence:

txt = "hello, and welcome to my world."
x = txt.capitalize()
print (x)

#Definition and Usage
#The capitalize() method returns a string where the first character is upper case.

# Syntax ---->  string.capitalize()
# Parameter Values ---> No parameters

#Make the string lower case:

txt = "Hello, And Welcome To My World!"
x = txt.casefold()
print(x)

#Definition and Usage
# The casefold() method returns a string where all the characters are lower case.

"""This method is similar to the lower() method, but the casefold() method is 
stronger, more aggressive, meaning that it will convert more characters into lower case, 
and will find more matches when comparing two strings and both are converted using the casefold() method."""

# Syntax ---> string.casefold()
# Parameter Values ---> No parameters

Python String center()
The center() method returns a string which is padded with the specified character.
The syntax of center() method is:

string.center(width[, fillchar])
center() Parameters
The center() method takes two arguments:

width - length of the string with padded characters
fillchar (optional) - padding character
The fillchar argument is optional. If it's not provided, space is taken as default argument.

Return Value from center()
The center() method returns a string padded with specified fillchar. It doesn't modify the original string.

Example 1: center() Method With Default fillchar
string = "Python is awesome"

new_string = string.center(24)

print("Centered String: ", new_string)
Output

Centered String:     Python is awesome      
Example 2: center() Method With * fillchar
string = "Python is awesome"

new_string = string.center(24, '*')

print("Centered String: ", new_string)
Output

Centered String:  ***Python is awesome****

"""Python String center()
The center() method returns a string which is padded with the specified character.
The syntax of center() method is:

string.center(width[, fillchar])
center() Parameters
The center() method takes two arguments:

width - length of the string with padded characters
fillchar (optional) - padding character
The fillchar argument is optional. If it's not provided, space is taken as default argument.

Return Value from center()
The center() method returns a string padded with specified fillchar. It doesn't modify the original string.

Example 1: **center()** Method With Default fillchar

```
string = "Python is awesome"

new_string = string.center(24)

print("Centered String: ", new_string)
```

Output:

Centered String:     Python is awesome      
Example 2: center() Method With * fillchar
string = "Python is awesome"

new_string = string.center(24, '*')

print("Centered String: ", new_string)
Output

Centered String:  ***Python is awesome****
"""

x = "Hello world"
 print(len(x), type(x))
 t = "2"
 print(x.islower())

x = input("type a text here: ")

print("the length of your text is ", len(x))
y = input("how ")

format(x, )
print(x)

x  = input("type ur text:")

if  x.islower() == True or x.islower() = False :
  print("Your text is in lower")
  print("good job")
else :
  print("you have upper letters in ur text")



x = "hello"
print(x.upper())

x = "hello"
print(x.center(11,"0"))  # let
print(x.endswith(""))



x = "hi i am am lakshmi{]" .for
print(len(x)) # length of the string

print(x.count("am"))
print(x.endswith("lakshmi"))

x = "hello world"
print(x.rstrip("ld"))  # rstrip gives the output erasing the letters / words from right side

# check how can we strip a letter which is reapeated
x = "hello world"
print(x.strip())

x = "hello"
print(x.replace("lo", "ioooo"))

"""# Question / examples"""

Write a program to print every character of a string entered by user in anew line using loop./
Write a program to find the length of the string "refrigerator" without using len function./
Write a program to check if the letter 'e' is present in the word 'Umbrella'./
Write a program to check if the word 'orange' is present in the "This is orange juice"./
Write a program to find the number of vowels, consonents, digits and white space characters in a string./
# Write a program to make a new string with all the consonents deleted from the string "Hello, have a good day".
Write a program to find the first and the last occurence of the letter 'o' and character ',' in "Hello, World"./
# Write the string after the first occurrence of ',' and the string after the last occurrence of ',' in the string "Hello, Good, Morning". World".
Write a program that takes your full name as input and displays the abbreviations of the first and middle names except the last name which is displayed as it is. 
For example, if your name is Robert Brett Roser, then the output should be R.B.Roser.
Check the occurrence of the letter 'e' and the word 'is' in the sentence "This is umbrella"./

x = "Hello, have a good day"
for i in x :
    print(i)

# Write a program to make a new string with all the consonents deleted from the string "Hello, have a good day".

x = "Hello, have a good day"
for i in x :
  if i.lower() in "aeiou"  :   #a not in "aeiou" # false 
    print(i)

"""https://drive.google.com/file/d/1dEvS29UVWZ1kg3i3I6uvhwvEbONokQM_/view?usp=sharing     - stings_exercise"""

x = "Umbrella"
if "h" in x :
  print("the letter is present in the text")
else :
  print("Letter is not present in the text")

x = "Umbrella"
print(x.rfind("e"))
print("the letter is present in the text")

x = input("enter your name:")
print("hello", x, "have a nycc day")

input("hello, have a nyccc day ")
# print("have a nyccc day")

x = input("enter a string: ")

for i in x :  # x = lakshmi,  i = l, i = a, i = k.....
  print(i)    # inside the for loop

x =  "refrigerator"
print(len(x))
count = 0
for i in x :
  count = count +1   # count += 1  1st iteration
  print(count)  # 

print(count)

x =  "refrigerator"
print(len(x))
count = 0
for i in x :
  print(i)
  count = count +1   #   1st iteration count = 0 +1 = 1, count variable will be updated with count = 1
                     # 2nd iteration count =  count +1 = 1 + 1 = 2, count = 2
                     
  print(count)

# Write a program to check if the word 'orange' is present in the "This is orange juice"./

x = "This is orange juice"
a = input("enter what word/ letter you want to find ")
if a in x :
  print("the word/letter is present in the text")

else:
  print("the word/letter is not present in the text")

Write a program to find the number of vowels, consonents, digits and white space characters in a string./
# Write a program to make a new string with all the consonents deleted from the string "Hello, have a good day".
Write a program to find the first and the last occurence of the letter 'o' and character ',' in "Hello, World"./
# Write the string after the first occurrence of ',' and the string after the last occurrence of ',' in the string "Hello, Good, Morning". World".
Write a program that takes your full name as input and displays the abbreviations of the first and middle names except the last name which is displayed as it is. 
For example, if your name is Robert Brett Roser, then the output should be R.B.Roser.
Check the occurrence of the letter 'e' and the word 'is' in the sentence "This is umbrella"./

help("string".rjust())

# rjust() Returns a right justified version of the string
x = "hello world"  # length  = 11
print(len(x))
print(x.rjust(20,"7"))   # 20 is the length of the string, 
x = "hello world"
print(x.ljust(20, "0"))

# Write a program to find the first and the last occurence of the letter 'o' and character ',' in "Hello, World"./
# hint :- 
# rindex(), or rfind() Searches the string for a specified value and returns the last position of where it was found
# index(), find() - Searches the string for a specified value and returns the position of where it was found 

x = "Hello, World"
#    012345678910
in1 = input("type a charecter: ")
if in1 in x :  # when e
  print(f"{in1} is present in the string")
  print(f"first occurence of {in1} is {x.index(in1)}")
  print(f"last occurence of {in1} is {x.rindex(in1)} ")   # last occurence
else :
  print(f"{in1} is not present in the string")

#print("first occurence of {} is {}".format(in1,x.index(in1) ))
  #print("the last occurence of the charecter" ,in1 ,"is"  x.rindex(in1))

#Write a program that takes your full name as input and displays the abbreviations of the first and middle names except the last name which is displayed as it is. 
# For example, if your name is Robert Brett Roser, then the output should be R.B.Roser.

fullname = input("enter your Full name: ")
sf = fullname.split()
print(sf)
print(f"{sf[0][2]}.{sf[0][2]}.{sf[2]}" )

fullname = input("enter your Full name: ")
sf = fullname.split()
print(sf, "\n")
if len(sf) == 3 :
  print(f"{sf[0][0]}.{sf[1][0]}.{sf[2]}" )
elif len(sf) == 2 : 
  print(f"{sf[0][0]}.{sf[1]}" )
elif len(sf) == 4 :
  print(f"{sf[0][0]}.{sf[1][0]}.{sf[2][0]}.{sf[3]}" )
else:
  print(sf)

#enter your Full name: Somaraju Lakshmi Durga
#                     012344
sf = ['Somaraju', 'Lakshmi', 'Durga']
#       0            1          2
#      01234567
#      Somaraju
print(sf[0][4])
print(sf[1][0])