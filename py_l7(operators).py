# -*- coding: utf-8 -*-
"""Py-L7(Operators).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KgfpI3OF4JtBse5q18-7ry0RvVqvFotI
"""

# assignment - convert km to m & vice-versa 
m = input("enter the  metres value in only number: ")
km = input("enter the  kilometres value only in numbers: ")
print(type(m))
print(type(km))
# int() converts into integers from string datatype or any datatype 
conv_metre = int(m) /1000      # converting metres into kilometers
conv_km = int(km)*1000        # converting kilometers into meters
print(conv_metre)  
print(conv_km)

print(str(m) + " meters is equal to " + str(conv_metre) + " km")
# or
print(m , "meters is equal to" , conv_metre , "km")
print(km , " kilometers is equal to" ,conv_km , "m")

5**3   # power or exponetation  = 5x5x5 = 125  ( that is 5 is multiplied 3 times)
5**10    # 5 is number to be multiplied......10 is used as power of 5( that is how many times to 5 number should be multiplied )

#assignment operators
 # +=  means adding a value or variable to the given variable

x = 5
y = 10
x *= 3   # x = x * 3  => x = 5*3 = 15......so 15 will be stored in the x variable
x += y   # x = x + y   => x = 5+10 = 15



"""# Python Operators
Operators are used to perform operations on variables and values.

Python divides the operators in the following groups:


* Arithmetic operators
* Assignment operators
* Comparison operators
* Logical operators
* Identity operators
* Membership operators
* Bitwise operators

###Python Arithmetic Operators
Arithmetic operators are used with numeric values to perform common mathematical operations:

```
+        Addition            x + y    
-        Subtraction         x - y    
*        Multiplication      x * y    
/        Division            x / y    
%        Modulus             x % y    
**       Exponentiation      x ** y    
//       Floor division      x // y
```


###Python Assignment Operators
Assignment operators are used to **assign values** to variables:

```
=         x = 5         x = 5    
+=        x += 3        x = x + 3    
-=        x -= 3        x = x - 3    
*=        x *= 3        x = x * 3    
/=        x /= 3        x = x / 3    
%=        x %= 3        x = x % 3    
//=       x //= 3       x = x // 3    
**=       x **= 3       x = x ** 3    
&=        x &= 3        x = x & 3    
|=        x |= 3        x = x | 3    
^=        x ^= 3        x = x ^ 3    
>>=       x >>= 3       x = x >> 3    
<<=       x <<= 3       x = x << 3
```
	

###Python Comparison Operators
Comparison operators are used to compare two values:

```
Operator	     Name	             Example
==        Equal                        x == y    
!=        Not equal                    x != y    
>         Greater than                 x > y    
<         Less than                    x < y    
>=        Greater than or equal to     x >= y    
<=        Less than or equal to        x <= y 	
```





###Python Logical Operators
Logical operators are used to combine conditional statements:

Operator	Description	Example	Try it
```
and     	Returns True if both statements are true                        	x < 5 and  x < 10	
or      	Returns True if one of the statements is true                    	x < 5 or x < 4	
not      	Reverse the result, returns False if the result is true	          not(x < 5 and x < 10)
```

###Python Identity Operators
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:

Operator	Description	Example	Try it
```
is 	         Returns True if both variables are the same object                    	x is y	
is not	     Returns True if both variables are not the same object                	x is not y	
```

###Python Membership Operators
Membership operators are used to test if a sequence is presented in an object:

Operator	Description	Example	Try it
```
in 	        Returns True if a sequence with the specified value is present in the object	          x in y	
not in	    Returns True if a sequence with the specified value is not present in the object       	x not in y
```

###Python Bitwise Operators
Bitwise operators are used to compare (binary) numbers:

Operator	Name	Description
```
&        AND                           Sets each bit to 1 if both bits are 1
|        OR                            Sets each bit to 1 if one of two bits is 1
^        XOR                           Sets each bit to 1 if only one of two bits is 1
~        NOT                           Inverts all the bits
<<       Zero fill left shift          Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>       Signed right shift            Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off

```
"""

and         Returns True if both statements are true                           x > 5  and  x < 10    
or          Returns True if one of the statements is true                        x < 5 or x < 4    
not          Reverse the result, returns False if the result is true              not(x < 5 and x < 10)

Python Bitwise Operators
Bitwise operators are used to compare (binary) numbers:

Operator Name Description

&        AND                           Sets each bit to 1 if both bits are 1
|        OR                            Sets each bit to 1 if one of two bits is 1
^        XOR                           Sets each bit to 1 if only one of two bits is 1
~        NOT                           Inverts all the bits
<<       Zero fill left shift          Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>       Signed right shift            Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off


In Python, bitwise operators are used to perform bitwise calculations on integers. 
The integers are first converted into binary and then operations are performed on bit by bit, hence the name bitwise operators. 
Then the result is returned in decimal format

"""https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/number-systems-introduction - number system 

* https://byjus.com/maths/number-system/#:~:text=The%20number%20system%20or%20the,their%20types%2C%20conversions%20and%20questions. 

* https://www.vedantu.com/maths/number-system 
"""

Decimal Number  	4-bit Binary Number	      Hexadecimal Number
0	                       0000            	       0
1		                     0001	                   1
2	                       0010	                   2
3                        0011	                   3
4	                       0100	                   4
5	                       0101	                   5
6	                       0110	                   6
7	                       0111	                   7
8	                       1000	                   8
9	                       1001	                   9
10	                     1010	                   A
11	                     1011	                   B
12	                     1100	                   C
13	                     1101	                   D
14	                     1110	                   E
15	                     1111	                   F
16	                     0001 0000	             10 (1+0)
17	                     0001 0001	             11 (1+1)

x = 0   # 0 is FALSE 
y = 1   # 1 is True
print (x & y)  # AND logic
# AND logic - when both the inputs are TRUE then only output is TRUE ......in remaining conditions it will be false
# if one of the input is FALSE then the output will be FALSE

0 - OFF / FALSE   --> WRONG statement
1 - ON / TRUE   --> CORRECT statement

AND logic  ---> # if one of the input is FALSE then the output will be FALSE         
                # if both input are TRUE then the output will be TRUE
A    B     output          
0    0       0
0    1       0
0    1       0
1    1       1

OR logic     ---> # if atleast one input is TRUE then the output will be TRUE         
                # if both input are FALSE then the output will be FALSE

A    B     output          
0    0       0
0    1       1
0    1       1
1    1       1

XOR logic     ---> # if the inputs are opposite to each other then the output will be TRUE    (i.e --> 0 ^ 1 = 1 ; 1 ^ 0 = 1)     
                # if both input are SAME then the output will be FALSE

A    B     output          
0    0       0
0    1       1
0    1       1
1    1       0

X = 1
Y = 1
print(X | Y) # 
# OR logic - when atleast one input is TRUE then the output is TRUE ......in only if both are FALSE inputs conditions it will be false
# if one of the input is TRUE then the output will be TRUE

x = 11    # sould give the input of x  between 5 to 10 (6,7,8,9)

condition = x<0 or x<10 # the condition is that the value of X should be > 5 &  < 10 
print(condition)

number = 123

sum_of_digits = 0
for digit in [1,2,3,4,5,6,7]:
#turn to string to iterate through

  sum_of_digits += int(digit)
  print(sum_of_digits)
print(sum_of_digits)

X = 1
Y = 1
print(X ^ Y)

3 >= 3 # becau
3 > 2 or 3 = 2

x =4
x > 5  and  x < 10

x = 2
x += 3   # x = x+3 = 2 + 3 = 5
print(x)  # x

print(0 & 0)
print(1 & 0)
print(0 & 1)
print(1 & 1)

print(0 | 0)   # consider 1 as HIGH or True
print(1 | 0)   # consider 0 as low or False
print(0 | 1)
print(1 | 1)

print(0 ^ 0)   # consider 1 as HIGH or True
print(1 ^ 0)   # consider 0 as low or False
print(0 ^ 1)
print(1 ^ 1)

print(~(0))

x = 7
y = 3
print(x & y)

# Commented out IPython magic to ensure Python compatibility.
Note:

/        Division            x / y     Divide left operand by the right one (always results into float) 
# %        Modulus             x % y     remainder of the division of left operand by the right	x % y (remainder of x/y)
**       Exponentiation      x ** y    left operand raised to the power of right	x**y (x to the power y)  
//       Floor division      x // y    division that results into whole number adjusted to the left in the number line	x // y

#2 >= 4

#5/3  => 5-3 = 2
10//3

#modulus

"""
2 / 5 = 0.4
0 x 5 = 0
2 - 0 = 2

2 - (5 * int(2/5))

a - (n * int(a/n))
"""

print(200%50)

2 - (5 * int(2/5))

2**10  # 2x2x2

10/3

10//3

169 ** (1/2)
 saqure of a number => square of 13 * 13 is 169  == > num * num  ==> num**2
 sqare root of 169 is 13 => 169**0.5 = 13 is answer   ==> num**0.5

"""https://www.programiz.com/python-programming/examples/calculator 

"""

# Python Program to calculate the square root

# Note: change this value for a different result
num = 8 


# To take the input from the user
#num = float(input('Enter a number: '))

num_sqrt = num ** 0.5   => 
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))

# Python Program to find the area of triangle

a = 5
b = 6
c = 7

# Uncomment below to take inputs from the user
# a = float(input('Enter first side: '))
# b = float(input('Enter second side: '))
# c = float(input('Enter third side: '))

# calculate the semi-perimeter
s = (a + b + c) / 2

# calculate the area
area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
print('The area of the triangle is %0.2f' %area)

# Python program to swap two variables

x = 5
y = 10

# To take inputs from the user
#x = input('Enter value of x: ')
#y = input('Enter value of y: ')

# create a temporary variable and swap the values
temp = x
x = y
y = temp


print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))

The format() method takes unlimited number of arguments, and are placed into the respective placeholders:

Example
quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))

name = "lakshmi"
print(" Hello {} ! have a nice day".format(name))
print(" Hello", name , "have a nice day")
# " Hello"+name+"have a nice day"

x = 5
y = 10

# To take inputs from the user
#x = input('Enter value of x: ')
#y = input('Enter value of y: ')

# create a temporary variable and swap the values
temp = x
x = y
y = temp

print(x)
print(y)

# Solve the quadratic equation ax**2 + bx + c = 0  --> 1x**2 + 5x + 6 =0

# import complex math module  
import cmath   # cmath is  a built-in module that you can use for mathematical tasks for complex numbers, trignometry etc.

a = 1
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

# find two solutions
sol1 = (-b-cmath.sqrt(d))/(2*a)
sol2 = (-b+cmath.sqrt(d))/(2*a)

print('The solution are {0} and {1}'.format(sol1,sol2))

"""https://docs.python.org/3/reference/expressions.html - document for operators

"""

Python Operators

Python Logical Operators --> Logical operators are used to combine conditional statements:

and     	Returns True if both statements are true                        	x < 5 and  x < 10	
or      	Returns True if one of the statements is true                    	x < 5 or x < 4	
not      	Reverse the result, returns False if the result is true	          not(x < 5 and x < 10)	

Python Identity Operators
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:

is 	         Returns True if both variables are the same object                    	x is y	
is not	     Returns True if both variables are not the same object                	x is not y	

Python Membership Operators
Membership operators are used to test if a sequence is presented in an object:
Operator	Description	Example	Try it

in 	        Returns True if a sequence with the specified value is present in the object	          x in y	
not in	    Returns True if a sequence with the specified value is not present in the object       	x not in y

"""#### **Celsius**
Celsius (more precisely, a degree Celsius), sometimes called centigrade, is a unit of measurement used in many countries to measure temperature. This unit was created by Anders Celsius (1701–1744), a Swedish astronomer. 0 degrees (°) Celsius is the melting point of pure water at sea level (normal pressure).

**Examples**

1. On the Celsius scale, water freezes at 0° and boils at 100°.
2. Room temperature is about 20 °C.
3. Absolute zero (the coldest possible temperature) is -273.15 °C.
4. Winters in Antarctica can be between -80 and -90 °C.
5. A human's body temperature is usually 37 °C.

####**Fahrenheit**
Fahrenheit (more precisely, a degree Fahrenheit) is a unit of measurement used to measure temperature. 

###The conversion rate to Celsius is **C= 5/9 x (F − 32)**. The degree Fahrenheit is abbreviated °F.

**Examples**

1. On the Fahrenheit scale, water freezes at 32° and boils at 212°.
2. Room temperature is about 70 °F.
3. Absolute zero (the coldest possible temperature) is -459.67 °F.
4. Winters in Antarctica can be between  and 
5. A human's body temperature is usually 
"""

3. Python Program to Convert Celsius To Fahrenheit
 * fahrenheit = (celsius * 1.8) + 32  # converting celsius into farenheit
 * celsius = (fahrenheit - 32) / 1.8   # converting farenheit into celsius

'''Celsius (more precisely, a degree Celsius), sometimes called centigrade, is a unit of measurement used in many countries to measure temperature. 
This unit was created by Anders Celsius (1701–1744), a Swedish astronomer. 0 degrees (°) Celsius is the melting point of pure water at sea level (normal pressure).'''

C= 5/9 x (F − 32)  # converting farenheit into celsius
converting celsius into farenheit :
C/(5/9) = c x (9/5)  = F-32
 c x (9/5)  = F-32
 Cx(9/5) + 32 = F   # converting celsius into farenheit :

4. To find simple interest
 * si= (p*t*r) /100

C= 5/9 x (F − 32)
 m = 5/9 *(km-32)
 m= km/1000

"""https://instrumentationtools.com/wp-content/uploads/2018/10/Logic-Gates-and-Truth-tables.png  - gates truth table """